const deployNodejsOnVps = "---\ntitle: How to Deploy a Node.js Server on a VPS\ndate: '2024-03-15'\ntags: ['node', 'devops']\nexcerpt: How to Deploy a Node.js Server on a VPS\n---\n\nDeploying a Node.js server on a Virtual Private Server (VPS) is a straightforward process that provides flexibility and control over your application. In this blog post, we'll go through the essential steps to get your Node.js application running on a VPS.\n\nStep 1: Choose a VPS Provider\nFirst, select a VPS provider that meets your needs. Popular options include:\n\n- DigitalOcean\n- Linode\n- AWS Lightsail\n- Vultr\n\nSign up for an account and create a new VPS instance. Choose an appropriate operating system, such as Ubuntu.\n\nStep 2: Connect to Your VPS\nUse SSH to connect to your VPS. Open your terminal and run:\n\n```bash\nssh root@your_vps_ip_address\n```\n\nReplace your_vps_ip_address with the actual IP address of your VPS.\n\nStep 3: Install Node.js\nOnce connected, update your package manager:\n\n```bash\nsudo apt update && sudo apt upgrade\n```\n\nThen, install Node.js. You can use Node Version Manager (NVM) for easy management:\n\n```bash\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\nsource ~/.bashrc\nnvm install node\n```\n\nStep 4: Upload Your Application\nYou can use SCP or Git to upload your application files to the VPS. For example, using SCP:\n\n```bash\nscp -r /path/to/your/app root@your_vps_ip_address:/path/to/destination\n```\n\nStep 5: Install Dependencies\nNavigate to your application directory and install the necessary dependencies:\n\n```bash\ncd /path/to/destination\nnpm install\n```\n\nStep 6: Set Up a Process Manager\nUse a process manager like PM2 to keep your application running in the background:\n\n```bash\nnpm install -g pm2\npm2 start app.js --name \"my-app\"\npm2 startup\npm2 save\n```\n\nStep 7: Configure a Reverse Proxy\nSet up a reverse proxy with Nginx to route traffic to your Node.js application. Install Nginx:\n\n```bash\nsudo apt install nginx\n# Then, configure it by creating a new file in /etc/nginx/sites-available/my-app:\n\n\nnginx\nserver {\nlisten 80;\nserver_name your_domain_or_ip;\n\n    location / {\n        proxy_pass http://localhost:3000; # Change the port as needed\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n\n}\nLink it to sites-enabled:\n```\n\n```bash\nsudo ln -s /etc/nginx/sites-available/my-app /etc/nginx/sites-enabled/\n```\n\nFinally, restart Nginx:\n\n```bash\nsudo systemctl restart nginx\n```\n\nStep 8: Access Your Application\nYou should now be able to access your Node.js application by visiting your VPS's IP address or domain name in a web browser.\n\nConclusion\nDeploying a Node.js server on a VPS gives you full control over your hosting environment. With these steps, you can have your application running smoothly and efficiently.\n\nHappy coding!\n";
export {
  deployNodejsOnVps as default
};
