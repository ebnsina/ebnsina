const tanstackQuerySearchFilters = "---\ntitle: TanStack Router + TanStack Query (Suspense) for Data Fetching with Pagination & Search\ndate: '2025-06-30'\ntags: ['react', 'tanstack', 'router', 'query', 'pagination', 'suspense']\nexcerpt: Learn how to integrate TanStack Router with TanStack Query using Suspense for powerful, declarative data loading and route-aware pagination and search.\nauthor: Ebn Sina\n---\n\n# 🚀 TanStack Router + TanStack Query (Suspense) with Pagination & Search\n\nFetching data in modern React apps should be **type-safe**, **suspense-enabled**, and **route-aware**. In this post, we'll use **TanStack Router** + **TanStack Query** to:\n\n✅ Fetch paginated data via route `loader`  \n✅ Handle loading and error states using Suspense  \n✅ Use `validateSearch` for safe query param parsing  \n✅ Sync pagination and search with URL  \n✅ Keep things fast, modular, and scalable\n\n---\n\n## 🧱 1. Project Setup\n\nInstall the required packages:\n\n```bash\nnpm install @tanstack/react-query @tanstack/react-router zod\n```\n\n---\n\n## 🧠 2. Define the Backend API Function\n\nYour backend returns paginated + filtered results, e.g., `/api/users?page=1&limit=10&search=john`.\n\n```ts\n// src/api/users.ts\nimport axios from 'axios'\n\nexport interface User {\n  id: string\n  name: string\n  email: string\n}\n\nexport interface UserListResponse {\n  users: User[]\n  total: number\n  page: number\n  limit: number\n}\n\nexport async function fetchUsers(params: {\n  page: number\n  limit: number\n  search?: string\n}): Promise<UserListResponse> {\n  const { data } = await axios.get('/api/users', {\n    params,\n  })\n  return data\n}\n```\n\n---\n\n## 🌐 3. Configure TanStack Query + Router\n\n### `queryClient.ts`\n\n```ts\nimport { QueryClient } from '@tanstack/react-query'\n\nexport const queryClient = new QueryClient()\n```\n\n### `main.tsx`\n\n```tsx\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { RouterProvider } from '@tanstack/react-router'\nimport { queryClient } from './lib/queryClient'\nimport { QueryClientProvider } from '@tanstack/react-query'\nimport { routeTree } from './routeTree.gen'\n\nconst router = createRouter({\n  routeTree,\n  context: {\n    queryClient,\n  },\n})\n\ndeclare module '@tanstack/react-router' {\n  interface Register {\n    router: typeof router\n  }\n}\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <RouterProvider router={router} />\n    </QueryClientProvider>\n  </React.StrictMode>\n)\n```\n\n---\n\n## 📄 4. Route with `validateSearch` + `loader` + Suspense\n\n```tsx\n// src/routes/users.tsx\nimport {\n  createFileRoute,\n  useSearch,\n  useLoaderData,\n} from '@tanstack/react-router'\nimport { fetchUsers } from '../api/users'\nimport { z } from 'zod'\n\nconst SearchSchema = z.object({\n  page: z.coerce.number().min(1).default(1),\n  limit: z.coerce.number().min(1).max(100).default(10),\n  search: z.string().optional(),\n})\n\nexport const Route = createFileRoute('/users')({\n  validateSearch: SearchSchema,\n  loaderDeps: ({ search }) => search,\n  loader: async ({ context, search }) => {\n    return context.queryClient.ensureQueryData({\n      queryKey: ['users', search],\n      queryFn: () => fetchUsers(search),\n    })\n  },\n  component: UsersPage,\n  pendingComponent: () => <div>🔄 Loading users...</div>,\n  errorComponent: ({ error }) => <div>❌ Error: {error.message}</div>,\n})\n```\n\n---\n\n## 📦 5. The `UsersPage` Component (Uses Suspense + React Query)\n\n```tsx\nimport { useQuery } from '@tanstack/react-query'\nimport { fetchUsers } from '../api/users'\nimport { Route } from './users'\n\nexport function UsersPage() {\n  const search = Route.useSearch()\n  const { data } = useQuery({\n    queryKey: ['users', search],\n    queryFn: () => fetchUsers(search),\n  })\n\n  const { users, total, page, limit } = data!\n\n  return (\n    <div>\n      <h1>📄 Users</h1>\n\n      <SearchForm initialSearch={search.search} />\n\n      <ul>\n        {users.map((user) => (\n          <li key={user.id}>\n            <b>{user.name}</b> - {user.email}\n          </li>\n        ))}\n      </ul>\n\n      <PaginationControls page={page} limit={limit} total={total} />\n    </div>\n  )\n}\n```\n\n---\n\n## 🔍 6. Search & Pagination Components\n\n### SearchForm\n\n```tsx\nimport { useNavigate } from '@tanstack/react-router'\nimport { Route } from './users'\n\nexport function SearchForm({ initialSearch }: { initialSearch?: string }) {\n  const navigate = useNavigate({ from: Route.id })\n  const [term, setTerm] = React.useState(initialSearch ?? '')\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault()\n        navigate({\n          search: (prev) => ({ ...prev, search: term, page: 1 }),\n        })\n      }}\n    >\n      <input\n        type=\"text\"\n        value={term}\n        placeholder=\"Search by name\"\n        onChange={(e) => setTerm(e.target.value)}\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  )\n}\n```\n\n---\n\n### PaginationControls\n\n```tsx\nexport function PaginationControls({\n  page,\n  limit,\n  total,\n}: {\n  page: number\n  limit: number\n  total: number\n}) {\n  const navigate = useNavigate({ from: Route.id })\n  const totalPages = Math.ceil(total / limit)\n\n  return (\n    <div>\n      {Array.from({ length: totalPages }, (_, i) => i + 1).map((p) => (\n        <button\n          key={p}\n          disabled={p === page}\n          onClick={() => navigate({ search: (s) => ({ ...s, page: p }) })}\n        >\n          {p}\n        </button>\n      ))}\n    </div>\n  )\n}\n```\n\n---\n\n## 🔁 UX Bonus: Keep Previous Data While Loading\n\nEnable `keepPreviousData` in `useQuery`:\n\n```tsx\nconst { data, isFetching } = useQuery({\n  queryKey: ['users', search],\n  queryFn: () => fetchUsers(search),\n  keepPreviousData: true,\n})\n```\n\nShow a subtle loading indicator without blanking out the UI:\n\n```tsx\n{isFetching && <small>Updating...</small>}\n```\n";
export {
  tanstackQuerySearchFilters as default
};
