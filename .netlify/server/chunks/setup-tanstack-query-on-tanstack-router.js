const setupTanstackQueryOnTanstackRouter = "---\ntitle: How to setup TanStack Query on TanStack router\ndate: '2025-06-30'\ntags: ['react', 'tanstack', 'query', 'router']\nexcerpt: Setup TanStack Query on TanStack router\n---\n\nThis guide walks you through integrating TanStack Query with TanStack Router in a React project for seamless data fetching and route-based data management.\n\n1. Install Required Packages\n```sh\nnpm install @tanstack/react-query @tanstack/react-query-devtools\n```\n\n2. Setup the Query Client\n```ts\nimport { QueryClient } from '@tanstack/react-query';\n\nexport const queryClient = new QueryClient();\n```\n\n3. Wrap Your App with Providers\n\n```tsx\n// src/main.tsx\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { RouterProvider, createRouter } from '@tanstack/react-router'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { routeTree } from './routeTree.gen'\nimport './styles.css'\n\nconst queryClient = new QueryClient()\n\n// Set up a Router instance\nconst router = createRouter({\n  routeTree,\n  context: {\n    queryClient,\n  },\n  defaultPreload: 'intent',\n  defaultPreloadStaleTime: 0,\n  scrollRestoration: true,\n})\n\n// Register things for typesafety\ndeclare module '@tanstack/react-router' {\n  interface Register {\n    router: typeof router\n  }\n}\n\nconst rootElement = document.getElementById('app')!\n\nif (!rootElement.innerHTML) {\n  const root = ReactDOM.createRoot(rootElement)\n  root.render(\n    <QueryClientProvider client={queryClient}>\n      <RouterProvider router={router} />\n    </QueryClientProvider>,\n  )\n}\n```\n\n4. Define Routes and Use loader for Query Integration\n\nExample route using loader with queryClient.fetchQuery():\n```tsx\n// src/routes/posts.route.tsx\nimport { createFileRoute } from '@tanstack/react-router';\nimport { queryClient } from '../lib/queryClient';\nimport { fetchPosts } from '../api/posts';\n\nexport const Route = createFileRoute('/posts')({\n  loader: ({ context }) =>\n    context.queryClient.ensureQueryData({\n      queryKey: ['posts'],\n      queryFn: fetchPosts,\n    }),\n  component: PostsComponent,\n});\n\nfunction PostsComponent() {\n  const { data } = useQuery({ queryKey: ['posts'], queryFn: fetchPosts });\n\n  return (\n    <div>\n      <h1>Posts</h1>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n    </div>\n  );\n}\n```\n\n5. Add React Query Devtools (Optional)\n```tsx\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\n\n<QueryClientProvider client={queryClient}>\n  <RouterProvider router={router} />\n  <ReactQueryDevtools initialIsOpen={false} />\n</QueryClientProvider>\n```\n\nAlternative: Use useQuery Directly in Component\n```tsx\nimport { useQuery } from '@tanstack/react-query';\n\nfunction Posts() {\n  const { data, isLoading } = useQuery({\n    queryKey: ['posts'],\n    queryFn: fetchPosts,\n  });\n\n  if (isLoading) return <div>Loading...</div>;\n  return <pre>{JSON.stringify(data)}</pre>;\n}\n```";
export {
  setupTanstackQueryOnTanstackRouter as default
};
