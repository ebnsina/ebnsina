const diyAuthTanstackRouter = "---\ntitle: How to Set Up DIY auth with TanStack Router\ndate: '2025-06-30'\ntags: ['React', 'TanStack Query', 'TanStack Router', 'Data Fetching', 'Routing']\nexcerpt: Learn how to integrate TanStack Query (React Query) with TanStack Router for data fetching, caching, and route-based loading in React applications.\nauthor: Ebn Sina\ndescription: A step-by-step guide to setting up TanStack Query with TanStack Router, including context setup, route loaders, caching, and authentication-aware data fetching in React.\n---\n\n\n\n# DIY Auth with TanStack Router \n\nWant to build your own authentication system using **TanStack Router** without Firebase or Auth0? This guide walks you through everything: route guards, login/logout flow, and handling `redirectTo` after login.\n\n---\n\n## What You'll Build\n\n✅ Auth state (with token in localStorage)  \n✅ Route guards using `beforeLoad`  \n✅ Login page with smart redirect  \n✅ Logout functionality  \n✅ Type-safe router context\n\n---\n\n## 1. Install TanStack Router\n\n```bash\nnpm install @tanstack/react-router\n```\n\n2. Configure __root route for router context\n```tsx\nimport * as React from 'react'\nimport { Outlet, createRootRouteWithContext } from '@tanstack/react-router'\nimport { TanStackRouterDevtools } from '@tanstack/react-router-devtools'\n\nimport type { AuthContext } from '../auth'\n\ninterface MyRouterContext {\n  auth: AuthContext\n}\n\nexport const Route = createRootRouteWithContext<MyRouterContext>()({\n  component: () => (\n    <>\n      <Outlet />\n      <TanStackRouterDevtools position=\"bottom-right\" initialIsOpen={false} />\n    </>\n  ),\n})\n```\n\n2. Create Auth Context\n```tsx\n// src/context/AuthContext.tsx\nimport React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  useCallback,\n} from 'react'\nimport axios from 'axios'\n\ninterface User {\n  id: string\n  email: string\n  token: string\n}\n\ninterface AuthContextType {\n  isAuthenticated: boolean\n  user: User | null\n  login: (email: string, password: string) => Promise<void>\n  logout: () => Promise<void>\n  register: (email: string, password: string) => Promise<void>\n}\n\nconst AuthCtx = createContext<AuthContextType | null>(null)\n\nconst key = 'tanstack.auth.user'\n\nfunction getStoredUser(): User | null {\n  try {\n    const stored = localStorage.getItem(key)\n    return stored ? JSON.parse(stored) : null\n  } catch {\n    return null\n  }\n}\n\nfunction setStoredUser(user: User | null) {\n  if (user) {\n    localStorage.setItem(key, JSON.stringify(user))\n  } else {\n    localStorage.removeItem(key)\n  }\n}\n\nexport const AuthProvider = ({ children }: { children: React.ReactNode }) => {\n  const [user, setUser] = useState<User | null>(getStoredUser())\n  const isAuthenticated = !!user\n\n  useEffect(() => {\n    setUser(getStoredUser())\n  }, [])\n\n  const login = useCallback(async (email: string, password: string) => {\n    const response = await axios.post<User>('/api/login', { email, password })\n    const user = response.data\n    setStoredUser(user)\n    setUser(user)\n  }, [])\n\n  const register = useCallback(async (email: string, password: string) => {\n    const response = await axios.post<User>('/api/register', { email, password })\n    const user = response.data\n    setStoredUser(user)\n    setUser(user)\n  }, [])\n\n  const logout = useCallback(async () => {\n    setStoredUser(null)\n    setUser(null)\n  }, [])\n\n  return (\n    <AuthCtx.Provider\n      value={{\n        isAuthenticated,\n        user,\n        login,\n        logout,\n        register,\n      }}\n    >\n      {children}\n    </AuthCtx.Provider>\n  )\n}\n\nexport const useAuth = () => {\n  const ctx = useContext(AuthCtx)\n  if (!ctx) throw new Error('useAuth must be used within AuthProvider')\n  return ctx\n}\n```\n\n3. Setup Router with Auth Context\n```tsx\n// src/main.ts\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { RouterProvider } from '@tanstack/react-router'\nimport { router } from './router'\nimport { AuthProvider, useAuth } from './auth'\nimport { createRouter } from '@tanstack/react-router'\nimport { routeTree } from './routeTree.gen'\n\nexport const router = createRouter({\n  routeTree,\n  context: {\n    auth: undefined!, // Will be injected at runtime\n  },\n})\n\ndeclare module '@tanstack/react-router' {\n  interface Register {\n    router: typeof router\n  }\n}\n\nfunction InnerApp() {\n  const auth = useAuth()\n  return <RouterProvider router={router} context={{ auth }} />\n}\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <AuthProvider>\n      <InnerApp />\n    </AuthProvider>\n  </React.StrictMode>\n)\n```\n\n\n4. Create Protected Layout\n\n```tsx\n// src/routes/_authenticated.tsx\nimport { createFileRoute, Outlet, redirect } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/_authenticated')({\n  beforeLoad: ({ context, location }) => {\n    if (!context.auth.isAuthenticated) {\n      throw redirect({\n        to: '/login',\n        search: { redirectTo: location.href },\n      })\n    }\n  },\n  component: AuthLayout,\n})\n\nfunction AuthLayout() {\n  const router = useRouter()\n  const navigate = Route.useNavigate()\n  const auth = useAuth()\n\n  const handleLogout = () => {\n    if (window.confirm('Are you sure you want to logout?')) {\n      auth.logout().then(() => {\n        router.invalidate().finally(() => {\n          navigate({ to: '/' })\n        })\n      })\n    }\n  }\n\n  return (\n    <div className=\"p-2 h-full\">\n      <h1>Authenticated Route</h1>\n      <p>This route's content is only visible to authenticated users.</p>\n\n      <ul className=\"py-2 flex gap-2\">\n        <li>\n          <Link\n            to=\"/dashboard\"\n            className=\"hover:underline data-[status='active']:font-semibold\"\n          >\n            Dashboard\n          </Link>\n        </li>\n        <li>\n          <button\n            type=\"button\"\n            className=\"hover:underline\"\n            onClick={handleLogout}\n          >\n            Logout\n          </button>\n        </li>\n      </ul>\n      <hr />\n      <Outlet />\n    </div>\n  )\n}\n```\n\n5. Login Page with redirectTo Support\n\n```tsx\n// src/routes/login.tsx\nimport { z } from 'zod' \nimport {\n  createFileRoute,\n  redirect,\n  useNavigate,\n} from '@tanstack/react-router'\nimport { useAuth } from '../auth'\n\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\nconst fallback = '/dashboard' as const\n\nconst LoginSearchSchema = z.object({\n  redirectTo: z.string().optional().catch(''),\n})\n\nexport const Route = createFileRoute('/login')({\n  validateSearch: LoginSearchSchema,\n  beforeLoad: ({ context, search }) => {\n    if (context.auth.isAuthenticated) {\n      throw redirect({ to: search.redirectTo || fallback })\n    }\n  },\n  component: LoginPage,\n})\n\nfunction LoginPage() {\n  const router = useRouter()\n  const { login } = useAuth()\n  const navigate = useNavigate({ from: Route.id })\n  const { redirectTo } = Route.useSearch() \n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault()\n\n    const data = new FormData(e.currentTarget);\n    const email = data.get('email);\n    const password = data.get('password);\n\n    await auth.login(email, password);\n    await router.invalidate();\n\n    await navigate({ to: search.redirect || fallback })\n  }\n\n  return (\n    <div>\n      <h1>Login</h1>\n\n      <form onSubmit={handleLogin}>\n      <input name=\"email\" placeholder=\"Enter email\" type=\"email\" className=\"border rounded-md p-2 w-full\" required />\n      <input name=\"password\" placeholder=\"Enter password\" type=\"password\" className=\"border rounded-md p-2 w-full\" required />\n        <button type=\"submit\">Login</button>\n      </form>\n    </div>\n  )\n}\n```\n\n6. Example Protected Route\n```tsx\n// src/routes/_authenticated/dashboard.tsx\nimport { createFileRoute } from '@tanstack/react-router'\n\nexport const Route = createFileRoute('/_authenticated/dashboard')({\n  component: DashboardPage,\n})\n\nfunction DashboardPage() {\n  return (\n    <div>\n      <h1>Dashboard</h1>\n    </div>\n  )\n}\n```\n";
export {
  diyAuthTanstackRouter as default
};
